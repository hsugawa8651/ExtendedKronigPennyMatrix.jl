var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"import Pkg\nPkg.add(\"PythonPlot\")\nusing PythonPlot\nusing LaTeXStrings\nclf()","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here is a sample REPL session to draw a dispersion relationship by using this package.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"First, construct FiniteSquareWell potential object.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using ExtendedKronigPennyMatrix\nv0=10; \nrho=0.5 # b/a;\npot=FiniteSquareWell(v0, rho)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Use get_function method to acquire potential function.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"begin\n   pf = get_potential(pot)\n   a = 1\n   xs=-a:a/100:2a\n   plot(xs, pf.(xs), \"k\")\n   xlim(0,1)\n   xlabel(L\"$x / a$\")\n   ylabel(L\"Energy / $E_0$\")\n   title( L\"$\\rho =$\"*string(rho))\n   savefig(\"plot1.png\", dpi=150); nothing # hide\nend","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: plot1)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Define Model by calling its constructor.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Ka=0.0 # wavenumber multiplied by a;\nmodel=Model(pot, Ka)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The field hnm of model contains Hamiltonian matrix.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"typeof(model.hnm)\nsize(model.hnm)\nmodel.hnm[1:5,1:5]","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Use LinearAlgebra.eigvals method to compute its energy eigenvalues. Refer to the LinearAlgebra standard library section in Julia documentation.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using LinearAlgebra\nevs=eigvals(model.hnm);\nevs[1:3]","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Draw dispersion curve by scanning Ka values between -pi pi.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using PythonPlot\nusing LaTeXStrings\nclf()\nbegin\n   a = 1\n   xs=-a:a/100:2a\n   plot(xs .- 1/2, pf.(xs), \"k\")  # Holizontally shift to centerize the potential well\n   cm=get_cmap(\"tab10\")\n   for Ka in (-18:18)/18*π\n      model=Model(pot, Ka)\n      ev = eigvals(model.hnm)\n      for i in 1:5\n         plot(Ka/ π, ev[i], \".\", color=cm(i-1))\n      end\n   end\n   xlim(-1,1)\n   ylim(-2,32)\n   xlabel(L\"$Ka / \\pi$\")\n   ylabel(L\"Energy / $E_0$\")\n   title( L\"$\\rho =$\"*string(rho))\n   savefig(\"plot2.png\", dpi=150); nothing # hide\nend","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: plot2)","category":"page"},{"location":"reference/#Interface","page":"Reference","title":"Interface","text":"","category":"section"},{"location":"reference/#Alternates-iterator-for-quantum-numbers","page":"Reference","title":"Alternates - iterator for quantum numbers","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Alternates","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.Alternates","page":"Reference","title":"ExtendedKronigPennyMatrix.Alternates","text":"Alternates(nmax)\n\nis an iterator to generate the series 0 1 -1 2 -2 ldots  up to nmax as an ordering of quantum numbers.\n\ncollect(Alternates(0)) => [0]\ncollect(Alternates(1)) => [0, 1, -1]\ncollect(Alternates(2)) => [0, 1, -1, 2, -2]\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"Base.iterate(::Alternates, state::Int = 1)","category":"page"},{"location":"reference/#Base.iterate","page":"Reference","title":"Base.iterate","text":"Base.iterate(alt::Alternates, state::Int = 1)\n\n\n\n\n\n","category":"function"},{"location":"reference/#E10-the-ground-state-energy","page":"Reference","title":"E10 - the ground state energy","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.get_E10","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.get_E10","page":"Reference","title":"ExtendedKronigPennyMatrix.get_E10","text":"get_E10(a; me=1)\n\ncalculates the ground state energy E_1^(0).\n\nE_1^(0) = dfracpi^2hbar^22ma^2\n\na : system length\nme : electron mass\n\nThis function handles physical quantities with Unitful package.\n\nIf a is dimensionless, suppose that a is in nm unit.\nOtherwise, a must have a dimension of length L.\nIf me is dimensionless, suppose that me is an effective mass with respect to electron rest mass.\nOtherwise, me must have a dimension of mass M.\nThe resultant enegy value is repesented in eV.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Potential","page":"Reference","title":"Potential","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.Potential","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.Potential","page":"Reference","title":"ExtendedKronigPennyMatrix.Potential","text":"Potential\n\nis an abstraction of potential including\n\npotential height, and/or\nother parameters depending on specific potential.\n\nA subtype of Potential is expected to possess following methods:\n\nget_potential(<:Potential)\nreturns a function to evaluate potential value as a position.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Model","page":"Reference","title":"Model","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.Model","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.Model","page":"Reference","title":"ExtendedKronigPennyMatrix.Model","text":"struct Model{P<:Potential}\n\nis an abstraction of model including following fields:\n\npotential : concrete Potential\nKa : wavenumber multiplied by a, period\nnmax : maximum of quantum numbers\nmmax : size of Hamiltonian matrix\nqnum : iterator of quantum numbers\nhnm : hamiltonian matrix\n\nA concrete subtype of model is expected to possess following methods:\n\nconstuctMatrix(model::Model{P})\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.Model(pot::ExtendedKronigPennyMatrix.Potential,Ka::Float64,nmax::Int64=60)","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.Model-2","page":"Reference","title":"ExtendedKronigPennyMatrix.Model","text":"function Model(pot::Potential,Ka::Float64,nmax::Int64=60)\n\nis a constructor of Kronig-Penny model, and defines other fields: qnum, nmax, and hnm\n\nMandantory parameters:\npot : potential\nKa : wavenumber multiplied by a, period\nOptional parameters: \nnmax : maximum of quantum numbers\n\n\n\n\n\n","category":"type"},{"location":"reference/#Finite-Square-Well","page":"Reference","title":"Finite Square Well","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"FiniteSquareWell","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.FiniteSquareWell","page":"Reference","title":"ExtendedKronigPennyMatrix.FiniteSquareWell","text":"struct FiniteSquareWell(v0, ρ)\n\nholds parameters of finite square well potential.\n\nFields\n\nv0 : potential height in units of E_1^(0)\nρ : barrier width in units of period a,  where 0  rho = dfracba  1\nNote that a position x is expressed in units of a throughout this package.\n\nThe constructor FiniteSquareWell(v0, ρ) confirms that 0 ≤ ρ ≤ 1, otherwise throws an error.\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"get_potential(::FiniteSquareWell)","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.get_potential-Tuple{FiniteSquareWell}","page":"Reference","title":"ExtendedKronigPennyMatrix.get_potential","text":"get_potential(::FiniteSquareWell)\n\nreturns a function v to evaluate potential v(x) as a position x,  such that:\n\nbeginaligned\nv(x)  = begincases \nv_0 \ntextinside well ie \n dfrac1-rho2 le dfracxa le dfrac1+rho2 \n  \n0  textoutside wellendcases\n\nv(x+a) = v(x)\nendaligned\n\nNote that a position x is expressed in units of a throughout this package.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.constuctMatrix(::Model{FiniteSquareWell})","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.constuctMatrix-Tuple{Model{FiniteSquareWell}}","page":"Reference","title":"ExtendedKronigPennyMatrix.constuctMatrix","text":"constuctMatrix(model::Model{FiniteSquareWell})\n\ncomputes and fills Hamiltonian matrix fields hnm in model with finite square well.\n\nh_nm = begincases \nleft(2n + dfracKapiright)^2 + v_0 (1-rho) \ntextfor n = mtext(diagonal elements) \nv_0\ndfrac(-1)^m-n+1pi dfracsin pi(m-n)rhom-n \n  \n textfor n neq mtext(off-diagonal elements)endcases\n\n\n\n\n\n","category":"method"},{"location":"reference/#Simple-Harmonic-Oscillator","page":"Reference","title":"Simple Harmonic Oscillator","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"SimpleHarmonicOscillator","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.SimpleHarmonicOscillator","page":"Reference","title":"ExtendedKronigPennyMatrix.SimpleHarmonicOscillator","text":"struct SimpleHarmonicOscillator(v0)\n\nholds parameters of finite square well potential.\n\nFields\n\nv0 = hbaromega in units of E_1^(0)\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"get_potential(::SimpleHarmonicOscillator)","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.get_potential-Tuple{SimpleHarmonicOscillator}","page":"Reference","title":"ExtendedKronigPennyMatrix.get_potential","text":"get_potential(::SimpleHarmonicOscillator)\n\nreturns a function v to evaluate potential v(x) as a position x,  such that:\n\nbeginaligned\nv(x)  = dfrac12m omega^2 a^2 left(dfracxa-dfrac12right)^2\n= dfracpi^24 v_0^2 E_1^(0) left(dfracxa-dfrac12right)^2 \nquad 0 le dfracxa le 1\n\nv(x+a) = v(x)\nendaligned\n\nNote that a position x is expressed in units of a throughout this package.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.constuctMatrix(::Model{SimpleHarmonicOscillator})","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.constuctMatrix-Tuple{Model{SimpleHarmonicOscillator}}","page":"Reference","title":"ExtendedKronigPennyMatrix.constuctMatrix","text":"constuctMatrix(model::Model{SimpleHarmonicOscillator})\n\ncomputes and fills Hamiltonian matrix fields hnm in model with finite square well.\n\nh_nm = begincases \nleft(2n + dfracKapiright)^2 + v_0^2 dfracpi^248  \ntextfor n = mtext(diagonal elements) \ndfracv_0^28\ndfrac(-1)^m-n(m-n)^2 \n  \n textfor n neq mtext(off-diagonal elements)endcases\n\n\n\n\n\n","category":"method"},{"location":"reference/#Inverted-Harmonic-Oscillator","page":"Reference","title":"Inverted Harmonic Oscillator","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"InvertedHarmonicOscillator","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.InvertedHarmonicOscillator","page":"Reference","title":"ExtendedKronigPennyMatrix.InvertedHarmonicOscillator","text":"struct InvertedHarmonicOscillator(v0)\n\nholds parameters of finite square well potential.\n\nFields\n\nv0 = hbaromega in units of E_1^(0)\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"get_potential(::InvertedHarmonicOscillator)","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.get_potential-Tuple{InvertedHarmonicOscillator}","page":"Reference","title":"ExtendedKronigPennyMatrix.get_potential","text":"get_potential(::InvertedHarmonicOscillator)\n\nreturns a function v to evaluate potential v(x) as a position x,  such that:\n\nbeginaligned\nv(x)  = begincases\n-dfrac12m omega^2 a^2 \n  left left(dfracxaright)^2 - dfrac14 right  \n0 le dfracxa le dfrac12 \n-dfrac12m omega^2 a^2  \n  left left(dfracxa-1right)^2 - dfrac14 right  \ndfrac12 le dfracxa le 1\nendcases\n\nv(x+a) = v(x)\nendaligned\n\nNote that a position x is expressed in units of a throughout this package.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.constuctMatrix(::Model{InvertedHarmonicOscillator})","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.constuctMatrix-Tuple{Model{InvertedHarmonicOscillator}}","page":"Reference","title":"ExtendedKronigPennyMatrix.constuctMatrix","text":"constuctMatrix(model::Model{InvertedHarmonicOscillator})\n\ncomputes and fills Hamiltonian matrix fields hnm in model with finite square well.\n\nh_nm = begincases \nleft(2n + dfracKapiright)^2 + v_0^2 dfracpi^224  \ntextfor n = mtext(diagonal elements) \n- dfracv_0^28 dfrac(-1)^m-n(m-n)^2  \n  \n textfor n neq mtext(off-diagonal elements)endcases\n\n\n\n\n\n","category":"method"},{"location":"reference/#LinearWell","page":"Reference","title":"LinearWell","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"LinearWell","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.LinearWell","page":"Reference","title":"ExtendedKronigPennyMatrix.LinearWell","text":"struct LinearWell(A)\n\nholds parameters of finite square well potential.\n\nFields\n\nA = hbaromega in units of E_1^(0)\n\n\n\n\n\n","category":"type"},{"location":"reference/","page":"Reference","title":"Reference","text":"get_potential(::LinearWell)","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.get_potential-Tuple{LinearWell}","page":"Reference","title":"ExtendedKronigPennyMatrix.get_potential","text":"get_potential(::LinearWell)\n\nreturns a function v to evaluate potential v(x) as a position x,  such that:\n\nbeginaligned\nv(x)  = begincases\n2A left( dfrac12 - dfracxa right)  \n0 le dfracxa le dfrac12 \n2A left( dfracxa - dfrac12 right)  \ndfrac12 le dfracxa le 1\nendcases\n\nv(x+a) = v(x)\nendaligned\n\nNote that a position x is expressed in units of a throughout this package.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Reference","title":"Reference","text":"ExtendedKronigPennyMatrix.constuctMatrix(::Model{LinearWell})","category":"page"},{"location":"reference/#ExtendedKronigPennyMatrix.constuctMatrix-Tuple{Model{LinearWell}}","page":"Reference","title":"ExtendedKronigPennyMatrix.constuctMatrix","text":"constuctMatrix(model::Model{LinearWell})\n\ncomputes and fills Hamiltonian matrix fields hnm in model with finite square well.\n\nh_nm = begincases \nleft(2n + dfracKapiright)^2 + dfracA2  \ntextfor n = mtext(diagonal elements) \ndfrac-Api^2 (m-n)^2  left 1-(-1)^m-nright\n  \n textfor n neq mtext(off-diagonal elements)endcases\n\n\n\n\n\n","category":"method"},{"location":"reference/#Alphabetical-Index","page":"Reference","title":"Alphabetical Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"usageja/#使い方","page":"使い方","title":"使い方","text":"","category":"section"},{"location":"usageja/","page":"使い方","title":"使い方","text":"このパッケージを利用して、分散関係を描画する手順を紹介します。 JuliaのREPLを用いた例です。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"最初に、FiniteSquareWell ポテンシャルを作成します。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"using ExtendedKronigPennyMatrix\nv0=10; \nrho=0.5 # b/a;\npot=FiniteSquareWell(v0, rho)","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"ポテンシャル形状は get_function関数で得られます。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"ここでは PythonPlot パッケージを用いて、プロットします。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"using PythonPlot\nusing LaTeXStrings\nclf()\nbegin\n   pf = get_potential(pot)\n   a = 1\n   xs=-a:a/100:2a\n   plot(xs, pf.(xs), \"k\")\n   xlim(0,1)\n   xlabel(L\"$x / a$\")\n   ylabel(L\"Energy / $E_0$\")\n   title( L\"$\\rho =$\"*string(rho))\n   # savefig(\"plot1.png\", dpi=150); nothing # hide\nend","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"(Image: plot1)","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"次に、Model オブジェクトを作成します。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"Ka=0.0 # wavenumber multiplied by a;\nmodel=Model(pot, Ka)","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"このオブジェクトの hnm フィールドに、ハミルトニアン行列が計算されました。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"typeof(model.hnm)\nsize(model.hnm)\nmodel.hnm[1:5,1:5]","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"Juliaの LinearAlgebra.eigvals メソッドを用いて、エネルギー固有値を計算します。 詳しくは、Juliaドキュメントの LinearAlgebra 標準ライブラリを参照してください。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"using LinearAlgebra\nevs=eigvals(model.hnm);\nevs[1:3]","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"波数（と周期aの積）Ka を -pi pi の範囲で走査して、分散関係を描きます。","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"using PythonPlot\nusing LaTeXStrings\nclf()\nbegin\n   a = 1\n   xs=-a:a/100:2a\n   plot(xs .- 1/2, pf.(xs), \"k\")  # Holizontally shift to centerize the potential well\n   cm=get_cmap(\"tab10\")\n   for Ka in (-18:18)/18*π\n      model=Model(pot, Ka)\n      ev = eigvals(model.hnm)\n      for i in 1:5\n         plot(Ka/ π, ev[i], \".\", color=cm(i-1))\n      end\n   end\n   xlim(-1,1)\n   ylim(-2,32)\n   xlabel(L\"$Ka / \\pi$\")\n   ylabel(L\"Energy / $E_0$\")\n   title( L\"$\\rho =$\"*string(rho))\n   savefig(\"plot2.png\", dpi=150); nothing # hide\nend","category":"page"},{"location":"usageja/","page":"使い方","title":"使い方","text":"(Image: plot2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExtendedKronigPennyMatrix","category":"page"},{"location":"#ExtendedKronigPennyMatrix","page":"Home","title":"ExtendedKronigPennyMatrix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ExtendedKronigPennyMatrix.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Construct a numerical Hamiltonian matrix (h_nm) of Kronig-Penny model  extended to arbitrary potentials  based on the paper written by Pavelich and Marsiglio.","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_m=1^infty h_nm c_m = ec_n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Energy is expressed in units of E_1^(0).","category":"page"},{"location":"","page":"Home","title":"Home","text":"E_1^(0) = dfracpi^2hbar^22ma^2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Refer the formulations to the following paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"R. L. Pavelicha and F. Marsigliob, \"The Kronig-Penney model extended to arbitrary potentials via numerical matrix mechanics,\" American Journal of Physics 83, 774 (2015).  DOI:10.1119/1.4923026,  ResearchGate","category":"page"}]
}
